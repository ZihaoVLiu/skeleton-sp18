public class Planet{	public double xxPos;	public double yyPos;	public double xxVel;	public double yyVel;	public double mass;	public String imgFileName;		public Planet(double xP, double yP, double xV, double yV, double m, String img){		xxPos = xP;		yyPos = yP;		xxVel = xV;		yyVel = yV;		mass = m;		imgFileName = img;	}		public Planet(Planet p){		xxPos = p.xxPos;		yyPos = p.yyPos;		xxVel = p.xxVel;		yyVel = p.yyVel;		mass = p.mass;		imgFileName = p.imgFileName;	}		public double calcDistance(Planet p){	double xDistance = xxPos - p.xxPos;	double yDistance = yyPos - p.yyPos;	double distance = Math.sqrt(xDistance * xDistance + yDistance *yDistance);	return distance;	}		public double calcForceExertedBy(Planet p) {	double G = 6.67e-11;	double F = G * this.mass * p.mass / (this.calcDistance(p) * this.calcDistance(p));	return F;	}		public double calcForceExertedByX(Planet p){	double force = this.calcForceExertedBy(p);	double xforce = force * (p.xxPos - this.xxPos) / this.calcDistance(p);	return xforce;	}		public double calcForceExertedByY(Planet p){	double force = this.calcForceExertedBy(p);	double yforce = force * (p.yyPos - this.yyPos) / this.calcDistance(p);	return yforce;	}		public double calcNetForceExertedByX(Planet[] allPlanets){		double total = 0;				for (Planet p : allPlanets){		if (! this.equals(p)){			total += this.calcForceExertedByX(p);		} 		}		return total;	}		public double calcNetForceExertedByY(Planet[] allPlanets){		double total = 0;		int len = allPlanets.length;				for (int i = 0; i < len; i ++){		if (! this.equals(allPlanets[i])){			total += this.calcForceExertedByY(allPlanets[i]);		} 		}		return total;	}		public void update(double dt, double fx, double fy){		double ax = fx / this.mass;		double ay = fy / this.mass;		xxVel = xxVel + dt * ax;		yyVel = yyVel + dt * ay;		xxPos = xxPos + dt * xxVel;		yyPos = yyPos + dt * yyVel;	}		public void draw() {		StdDraw.picture(this.xxPos, this.yyPos, "images/" + imgFileName);	}	}